
(load "../utils/init-key-const.repl")

(begin-tx)
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../gas-oracle/gas-oracle.pact")
(load "../validator-announce/validator-announce.pact")
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../ism/merkle-tree-ism.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (merkle-tree-ism.ONLY_ADMIN) ] } ])
(merkle-tree-ism.initialize [vdata.validator] data.threshold)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../igp/igp.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (igp.ONLY_ADMIN) ] } ])
(igp.initialize)
(commit-tx)

(begin-tx)
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "domain-routing-ism.pact")
(commit-tx)
(print "\nLoaded ISM Routing")

;; initialize ;; fail
(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (domain-routing-ism.ONLY_ADMIN) ] } ])
(expect-failure "length mismatch" (domain-routing-ism.initialize [data.pol-domain] []))
(commit-tx)

;; initialize ;; success
(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (domain-routing-ism.ONLY_ADMIN) ] } ])
(domain-routing-ism.initialize [data.pol-domain] [merkle-tree-ism])
(expect "correct domains" [data.pol-domain] (domain-routing-ism.get-domains))
(expect "correct ism" merkle-tree-ism (domain-routing-ism.get-module data.pol-domain))
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../merkle/merkle-tree-hook.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (merkle-tree-hook.ONLY_ADMIN) ] } ])
(merkle-tree-hook.initialize)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../router/router.pact")
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../mailbox/mailbox.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (mailbox.ONLY_ADMIN) ] } ])
(mailbox.initialize)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (merkle-tree-hook.ONLY_ADMIN) ] } ])
(merkle-tree-hook.set-mailbox mailbox)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (router.ONLY_ADMIN) ] } ])
(router.set-mailbox mailbox)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../hyp-erc20-collateral/hyp-erc20-collateral.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (hyp-erc20-collateral.ONLY_ADMIN) ] } ])
(hyp-erc20-collateral.initialize coin)
(commit-tx)

;; set-domain ;; fail capability
(begin-tx)
(namespace "NAMESPACE")
(expect "correct domains" [data.pol-domain] (domain-routing-ism.get-domains))
(expect-failure "no ISM found for origin" (domain-routing-ism.get-module data.eth-domain))
(env-sigs [ { "key": bridge-keys.alice, "caps": [] } ])
(expect-failure "not allowed" (domain-routing-ism.set-domain data.eth-domain merkle-tree-ism))
(expect "correct domains" [data.pol-domain] (domain-routing-ism.get-domains))
(expect-failure "no ISM found for origin" (domain-routing-ism.get-module data.eth-domain))
(commit-tx)

;; set-domain ;; success
(begin-tx)
(namespace "NAMESPACE")
(expect "correct domains" [data.pol-domain] (domain-routing-ism.get-domains))
(expect-failure "no ISM found for origin" (domain-routing-ism.get-module data.eth-domain))
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(domain-routing-ism.set-domain data.eth-domain merkle-tree-ism)
(expect "correct domains" [data.pol-domain data.eth-domain] (domain-routing-ism.get-domains))
(expect "correct ism" merkle-tree-ism (domain-routing-ism.get-module data.eth-domain))
(commit-tx)

;; remove-domain ;; fail capability
(begin-tx)
(namespace "NAMESPACE")
(expect "correct domains" [data.pol-domain data.eth-domain] (domain-routing-ism.get-domains))
(expect "correct ism" merkle-tree-ism (domain-routing-ism.get-module data.eth-domain))
(env-sigs [ { "key": bridge-keys.alice, "caps": [] } ])
(expect-failure "not allowed" (domain-routing-ism.remove-domain data.eth-domain))
(expect "correct domains" [data.pol-domain data.eth-domain] (domain-routing-ism.get-domains))
(expect "correct ism" merkle-tree-ism (domain-routing-ism.get-module data.eth-domain))
(commit-tx)

;; remove-domain ;; success
(begin-tx)
(namespace "NAMESPACE")
(expect "correct domains" [data.pol-domain data.eth-domain] (domain-routing-ism.get-domains))
(expect "correct ism" merkle-tree-ism (domain-routing-ism.get-module data.eth-domain))
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(domain-routing-ism.remove-domain data.eth-domain)
(expect "correct domains" [data.pol-domain] (domain-routing-ism.get-domains))
(expect-failure "no ISM found for origin" (domain-routing-ism.get-module data.eth-domain))
(commit-tx)

;; route ;; success
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message)
(let*
  (
    (message:object{hyperlane-message}
      {
        "version": 3,
        "nonce": data.nonce,
        "originDomain": data.eth-domain,
        "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
        "destinationDomain": data.kda-domain,
        "recipient": (router.get-token-hash hyp-erc20-collateral),
        "messageBody": encoded.message-chain1
      }
    )
  )
  (expect-failure "no ISM found for origin" (domain-routing-ism.route message))
)
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(domain-routing-ism.set-domain data.eth-domain merkle-tree-ism)
(let*
  (
    (message:object{hyperlane-message}
      {
        "version": 3,
        "nonce": data.nonce,
        "originDomain": data.eth-domain,
        "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
        "destinationDomain": data.kda-domain,
        "recipient": (router.get-token-hash hyp-erc20-collateral),
        "messageBody": encoded.message-chain1
      }
    )
  )
  (expect "correct route" merkle-tree-ism (domain-routing-ism.route message))
)
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(domain-routing-ism.remove-domain data.eth-domain)
(let*
  (
    (message:object{hyperlane-message}
      {
        "version": 3,
        "nonce": data.nonce,
        "originDomain": data.eth-domain,
        "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
        "destinationDomain": data.kda-domain,
        "recipient": (router.get-token-hash hyp-erc20-collateral),
        "messageBody": encoded.message-chain1
      }
    )
  )
  (expect-failure "no ISM found for origin" (domain-routing-ism.route message))
)
(commit-tx)