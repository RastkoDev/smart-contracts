(load "../utils/setup-complete.repl")

;; quote-gas-payment
(begin-tx)
(namespace "NAMESPACE")
(print "\nquote-gas-payment")
(env-gasmodel "table")
(env-gaslimit 150000)
(igp.quote-gas-payment data.eth-domain)
(print (env-gas))
(env-gas 0)
(igp.quote-gas-payment data.pol-domain)
(print (env-gas))
(env-gas 0)
(commit-tx)

;; dispatch hyp-erc20-collateral
(begin-tx)
(namespace "NAMESPACE")
(print "\ndispatch hyp-erc20-collateral")
(env-gasmodel "table")
(env-gaslimit 150000)
(env-sigs [ { "key": bridge-keys.alice, "caps": [ 
    (coin.TRANSFER bridge-keys.alice-principal (hyp-erc20-collateral.get-collateral-account) 699.0)
    (coin.TRANSFER bridge-keys.alice-principal igp.IGP_ACCOUNT (igp.quote-gas-payment data.eth-domain))
    (router.TRANSFER_REMOTE data.eth-domain bridge-keys.alice-principal bridge-keys.alice 699.0)
    (hyp-erc20-collateral.TRANSFER_FROM bridge-keys.alice-principal 699.0)
]}])
(env-chain-data { "sender": bridge-keys.alice-principal })
(mailbox.dispatch hyp-erc20-collateral data.eth-domain bridge-keys.alice 699.0)
(print (env-gas))
(env-gas 0)
(commit-tx)

;; process hyp-erc20-collateral same chain
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message)
(env-chain-data { "chain-id": "0"})
(print "\nprocess hyp-erc20-collateral same chain")
(env-gasmodel "table")
(env-gaslimit 180000)
(let*
    (
        (message:object{hyperlane-message} 
            { 
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20-collateral),
                "messageBody": encoded.message-chain0
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
)
(print (env-gas))
(env-gas 0)
(commit-tx)

;; process hyp-erc20-collateral cross chain
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message)
(env-chain-data { "chain-id": "0"})
(print "\nprocess hyp-erc20-collateral cross chain")
(env-gasmodel "table")
(env-gaslimit 180000)
(let*
    (
        (message:object{hyperlane-message} 
            { 
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20-collateral),
                "messageBody": encoded.message-chain1
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
)
(print (env-gas))
(env-gas 0)
(commit-tx)

;; process hyp-erc20 same chain
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message)
(env-chain-data { "chain-id": "0"})
(print "\nprocess hyp-erc20 same chain")
(env-gasmodel "table")
(env-gaslimit 180000)
(let*
    (
        (message:object{hyperlane-message} 
            { 
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20),
                "messageBody": encoded.message-chain0
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
)
(print (env-gas))
(env-gas 0)
(commit-tx)

;; process hyp-erc20 cross chain
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message)
(env-chain-data { "chain-id": "0"})
(print "\nprocess hyp-erc20 cross chain")
(env-gasmodel "table")
(env-gaslimit 180000)
(let*
    (
        (message:object{hyperlane-message} 
            { 
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20),
                "messageBody": encoded.message-chain1
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
)
(print (env-gas))
(env-gas 0)
(commit-tx)

;; dispatch hyp-erc20
(begin-tx)
(namespace "NAMESPACE")
(print "\ndispatch hyp-erc20")
(env-gasmodel "table")
(env-gaslimit 150000)
(env-sigs [ { "key": bridge-keys.alice, "caps": [ 
    (coin.TRANSFER bridge-keys.alice-principal igp.IGP_ACCOUNT (igp.quote-gas-payment data.eth-domain))
    (router.TRANSFER_REMOTE data.eth-domain bridge-keys.alice-principal bridge-keys.alice 10.0)
    (hyp-erc20.TRANSFER_FROM bridge-keys.alice-principal 10.0)
]}])
(env-chain-data { "sender": bridge-keys.alice-principal })
(mailbox.dispatch hyp-erc20 data.eth-domain bridge-keys.alice 10.0)
(print (env-gas))
(env-gas 0)
(commit-tx)