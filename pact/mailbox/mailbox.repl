
(load "../utils/init-key-const.repl")

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../gas-oracle/gas-oracle.pact")
(load "../validator-announce/validator-announce.pact")
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../ism/merkle-tree-ism.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (merkle-tree-ism.ONLY_ADMIN) ] } ])
(merkle-tree-ism.initialize [vdata.validator] data.threshold)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../ism/domain-routing-ism.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (domain-routing-ism.ONLY_ADMIN) ] } ])
(domain-routing-ism.initialize [data.eth-domain] [merkle-tree-ism])
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../igp/igp.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (igp.ONLY_ADMIN) ] } ])
(igp.initialize)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../merkle/merkle-tree-hook.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (merkle-tree-hook.ONLY_ADMIN) ] } ])
(merkle-tree-hook.initialize)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../router/router.pact")
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../mailbox/mailbox.pact")
(commit-tx)
(print "\nLoaded Mailbox")

(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (merkle-tree-hook.ONLY_ADMIN) ] } ])
(merkle-tree-hook.set-mailbox mailbox)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (router.ONLY_ADMIN) ] } ])
(router.set-mailbox mailbox)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (gas-oracle.ONLY_ORACLE_ADMIN) ] } ])
(gas-oracle.set-remote-gas-data-configs [
{
    "domain": data.eth-domain,
    "token-exchange-rate": 1.0,
    "gas-price": 0.001
}
])

(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (validator-announce.ONLY_ADMIN) ] } ])
(validator-announce.announce vdata.validator vdata.sloc vdata.va-sig)

(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (igp.ONLY_ADMIN) ] } ])
(igp.set-remote-gas-amount {"domain": data.eth-domain, "gas-amount": 1000.0})
(commit-tx)

;; initialize
(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (mailbox.ONLY_ADMIN) ] } ])
(mailbox.initialize)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../hyp-erc20/hyp-erc20.pact")
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-data { "init": true })
(env-sigs [ { "key": bridge-keys.bridge, "caps": [] } ])
(load "../hyp-erc20-collateral/hyp-erc20-collateral.pact")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (hyp-erc20-collateral.ONLY_ADMIN) ] } ])
(hyp-erc20-collateral.initialize coin)
(commit-tx)

;; enroll-remote-router
(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (router.ONLY_ADMIN) ] } ])
(router.enroll-remote-router data.eth-domain hyp-erc20 data.eth-router)
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (router.ONLY_ADMIN) ] } ])
(router.enroll-remote-router data.eth-domain hyp-erc20-collateral data.eth-router)
(commit-tx)

;; store-router
(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (router.ONLY_ADMIN) ] } ])
(router.store-token-hash hyp-erc20-collateral)
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (router.ONLY_ADMIN) ] } ])
(router.store-token-hash hyp-erc20)
(commit-tx)

;; pause ; success
(begin-tx)
(namespace "NAMESPACE")
(expect "Not paused" false (mailbox.paused))
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (mailbox.PAUSE) ] } ])
(mailbox.pause true)
(expect "Paused" true (mailbox.paused))
(commit-tx)

;; process ;; fail bridge paused
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message [hyperlane-message])

(env-chain-data { "block-height": 5 })
(env-chain-data { "chain-id": "0"})
(let*
    (
        (message:object{hyperlane-message}
            {
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20),
                "messageBody": encoded.message-chain0
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (expect "Message not delivered" false (mailbox.delivered (hyperlane-message-id message)))
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (expect-failure "Bridge is paused" (mailbox.process id message))
    (expect "Message delivered" false (mailbox.delivered (hyperlane-message-id message)))
)
(commit-tx)

;; unpause ;; fail capability ONLY_ADMIN
(begin-tx)
(env-keys [])
(env-sigs [])
(namespace "NAMESPACE")
(expect "Paused" true (mailbox.paused))
(env-sigs [ { "key": bridge-keys.charly, "caps": [(mailbox.PAUSE)] } ])
(expect-failure "Cannot interact with mailbox directly" "Keyset failure" (mailbox.pause true))
(expect "Paused" true (mailbox.paused))
(commit-tx)

;; unpause ; success
(begin-tx)
(namespace "NAMESPACE")
(expect "Paused" true (mailbox.paused))
(env-sigs [ { "key": bridge-keys.bridge, "caps": [ (mailbox.PAUSE) ] } ])
(mailbox.pause false)
(expect "Not paused" false (mailbox.paused))
(commit-tx)

;; dispatch ;; success hyp-erc20-collateral
(begin-tx)
(namespace "NAMESPACE")
(expect "Nonce before the dispatch" 0 (mailbox.nonce))
(env-sigs [ { "key": bridge-keys.alice, "caps": [
    (coin.TRANSFER
        bridge-keys.alice-principal
        (hyp-erc20-collateral.get-collateral-account)
        699.0
    )
    (coin.TRANSFER
        bridge-keys.alice-principal
        igp.IGP_ACCOUNT
        (igp.quote-gas-payment data.eth-domain)
    )
]}])
(env-chain-data { "sender": bridge-keys.alice-principal })
(mailbox.dispatch hyp-erc20-collateral data.eth-domain bridge-keys.alice 699.0)
(expect "Nonce after the dispatch" 1 (mailbox.nonce))
(commit-tx)

;; process ;; fail wrong chain id
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message [hyperlane-message])

(env-chain-data { "block-height": 5 })
(env-chain-data { "chain-id": "0"})
(let*
    (
        (message:object{hyperlane-message}
            {
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20-collateral),
                "messageBody": encoded.message-chain20
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (expect "Message not delivered" false (mailbox.delivered (hyperlane-message-id message)))
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (expect-failure "Wrong chain id" (mailbox.process id message))
    (expect "Message not delivered" false (mailbox.delivered (hyperlane-message-id message)))
)
(commit-tx)

;; process ;; success hyp-erc20
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message [hyperlane-message])

(env-chain-data { "block-height": 5 })
(env-chain-data { "chain-id": "0"})
(let*
    (
        (message:object{hyperlane-message}
            {
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20),
                "messageBody": encoded.message-chain0
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (expect "Message not delivered" false (mailbox.delivered (hyperlane-message-id message)))
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
    (expect "Message not delivered" true (mailbox.delivered (hyperlane-message-id message)))
)
(commit-tx)

;; process ;; success hyp-erc20-collateral
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message [hyperlane-message])

(env-chain-data { "block-height": 5 })
(env-chain-data { "chain-id": "0"})
(let*
    (
        (message:object{hyperlane-message}
            {
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20-collateral),
                "messageBody": encoded.message-chain0
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (expect "Message not delivered" false (mailbox.delivered (hyperlane-message-id message)))
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
    (expect "Message delivered" true (mailbox.delivered (hyperlane-message-id message)))
)
(commit-tx)

;; process ;; fail already delivered
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message [hyperlane-message])

(env-chain-data { "block-height": 5 })
(env-chain-data { "chain-id": "0"})
(let*
    (
        (message:object{hyperlane-message}
            {
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20-collateral),
                "messageBody": encoded.message-chain0
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (expect "Message not delivered" true (mailbox.delivered (hyperlane-message-id message)))
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (expect-failure "Already delivered" (mailbox.process id message))
    (expect "Message delivered" true (mailbox.delivered (hyperlane-message-id message)))
)
(commit-tx)


(begin-tx)
(module vdata GOVERNANCE
    (defcap GOVERNANCE () true)
    (defconst validator "funfunyall")
    (defconst sloc "storagelocation")
    (defconst va-sig "sig")
)
(commit-tx)

;; dispatch ;; success hyp-erc20
(begin-tx)
(namespace "NAMESPACE")
(expect "Nonce before the dispatch" 1 (mailbox.nonce))
(env-sigs [ { "key": bridge-keys.alice, "caps": [
    (router.TRANSFER_REMOTE data.eth-domain bridge-keys.alice-principal bridge-keys.alice 10.0)
    (coin.TRANSFER bridge-keys.alice-principal igp.IGP_ACCOUNT (igp.quote-gas-payment data.eth-domain))
]}])
(env-chain-data { "sender": bridge-keys.alice-principal })
(mailbox.dispatch hyp-erc20 data.eth-domain bridge-keys.alice 10.0)
(expect "Nonce after the dispatch" 2 (mailbox.nonce))
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message [hyperlane-message])

(env-chain-data {"block-height": 10, "chain-id": "0"})
(let*
    (
        (attacker-keyset "eyJrZXlzIjogWyJkZWFkYmVlZmRlYWRiZWVmZGVhZGJlZWZkZWFkYmVlZmRlYWRiZWVmZGVhZGJlZWZkZWFkYmVlZmRlYWRiZWVmIl0sICJwcmVkIjogImtleXMtYWxsIn0=")
        (message:object{hyperlane-message}
            {
                "version": 3,
                "nonce": 42,
                "originDomain": 31337,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": 626,
                "recipient": (router.get-token-hash hyp-erc20),
                "messageBody": (hyperlane-encode-token-message
                    {"amount": 1000.0, "recipient": attacker-keyset, "chainId": "0"}
                )
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [(mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
    (expect "Message not delivered" true (mailbox.delivered id))
)

(commit-tx)