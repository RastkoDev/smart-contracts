(load "../utils/setup-complete.repl")

;; Create an account for recipient and fund it
(begin-tx)
(namespace "NAMESPACE")
(let
    (
        (keys-guard:guard (at "recipient" (hyperlane-decode-token-message data.encoded-tm)))
    )
    ;; Action needed for testing
    (test-capability (coin.COINBASE))
    (coin.coinbase data.recipient keys-guard 1000.0)
)
(commit-tx)

;; Transfer the message to the remote
(begin-tx)
(namespace "NAMESPACE")
(env-chain-data { "sender": data.recipient })

(print "\nDispatching HyperlaneMessage")
(print (format "Recipient initial balance {}" [(hyp-erc20-collateral.get-collateral-balance data.recipient)]))
(print (format "Treasury balance before the dispatch {}" [(coin.get-balance (hyp-erc20-collateral.get-collateral-account))]))

;; This capability consists of gas price + the number of tokens we want to transfer
(env-sigs [ { "key": data.recipient-key, "caps": [ 
    (coin.TRANSFER data.recipient (hyp-erc20-collateral.get-collateral-account) 699.0)
    (coin.TRANSFER data.recipient igp.IGP_ACCOUNT (igp.quote-gas-payment data.eth-domain))
    (router.TRANSFER_REMOTE data.eth-domain data.recipient data.recipient-key 699.0)
    (hyp-erc20-collateral.TRANSFER_FROM data.recipient 699.0)
]}])
(mailbox.dispatch hyp-erc20-collateral data.eth-domain data.recipient-key 699.0)
(print (format "Recipient balance after the dispatch {}" [(hyp-erc20-collateral.get-collateral-balance data.recipient)]))
(print (format "Treasury balance after the dispatch {}" [(coin.get-balance (hyp-erc20-collateral.get-collateral-account))]))
(commit-tx)

;; Process the incoming tx
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message [hyperlane-message])

(env-chain-data { "block-height": 5 })
(env-chain-data { "chain-id": "0"})
(print "\nProcessing HyperlaneMessage")
(let*
    (
        (message:object{hyperlane-message} 
            { 
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20-collateral),
                "messageBody": data.encoded-tm
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
)
(env-chain-data { "chain-id" : "1" })
(print (format "Recipient balance after the process {}" [(hyp-erc20-collateral.get-collateral-balance data.recipient)]))
(print (format "Treasury balance after the process {}" [(coin.get-balance (hyp-erc20-collateral.get-collateral-account))]))
(commit-tx)
