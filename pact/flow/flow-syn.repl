(load "../utils/setup-complete.repl")

;; Create an account for recipient and fund it
(begin-tx)
(namespace "NAMESPACE")
(env-sigs [{ "key": data.recipient-key, "caps": [] }])
(hyp-erc20.create-account data.recipient (describe-keyset "NAMESPACE.recipient"))
(commit-tx)

;; Process the incoming tx
(begin-tx)
(namespace "NAMESPACE")
(use hyperlane-message [hyperlane-message])

(env-chain-data { "block-height": 5 })
(env-chain-data { "chain-id": "0"})
(env-hash (hash "crosschain-step-1"))
(print "\nProcessing HyperlaneMessage")
;; Verify that the recipient exists and is funded 
(print (format "Recipient initial balance {}" [(hyp-erc20.get-balance data.recipient)]))
(let*
    (
        (message:object{hyperlane-message} 
            { 
                "version": 3,
                "nonce": data.nonce,
                "originDomain": data.eth-domain,
                "sender": "AAAAAAAAAAAAAAAAS9NJkuCZTp08U8HM_lwuONkHM44",
                "destinationDomain": data.kda-domain,
                "recipient": (router.get-token-hash hyp-erc20),
                "messageBody": data.encoded-tm
            }
        )
        (id:string (hyperlane-message-id message))
    )
    (env-verifiers [{"name": "hyperlane_v3_message", "caps": [ (mailbox.PROCESS-MLC id message (domain-routing-ism.get-validators message) (domain-routing-ism.get-threshold message))]}])
    (mailbox.process id message)
)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-chain-data { "chain-id" : "1" })
(continue-pact 1 false (hash "crosschain-step-1"))
(print (format "Recipient balance after the process {}" [(hyp-erc20.get-balance data.recipient)]))
(commit-tx)

;; Transfer the tokens from chain 1 to chain 0
(begin-tx)
(namespace "NAMESPACE")
(env-chain-data { "chain-id" : "1" })
(env-hash (hash "xchain"))
(env-sigs [ { "key": data.recipient-key, "caps": [ (hyp-erc20.TRANSFER_XCHAIN data.recipient data.recipient 55.0 "0") ] } ])
(let
    (
        (keys-guard:guard (at "recipient" (hyperlane-decode-token-message data.encoded-tm)))
    )
    (hyp-erc20.transfer-crosschain data.recipient data.recipient keys-guard "0" 55.0)

    ;; Action needed for testing
    (test-capability (coin.COINBASE))
    (coin.coinbase data.recipient keys-guard 1000.0)
)
(commit-tx)

(begin-tx)
(namespace "NAMESPACE")
(env-chain-data { "chain-id" : "0" })
(continue-pact 1 false (hash "xchain"))
(commit-tx)

;; Transfer the message to the remote
(begin-tx)
(namespace "NAMESPACE")
(env-sigs [ { "key": data.recipient-key, "caps": [ 
    (coin.TRANSFER data.recipient igp.IGP_ACCOUNT (igp.quote-gas-payment data.eth-domain))
    (router.TRANSFER_REMOTE data.eth-domain data.recipient data.recipient-key 15.0)
    (hyp-erc20.TRANSFER_FROM data.recipient 15.0)
]}])
(print "\nDispatching HyperlaneMessage")
(print (format "Recipient balance before the dispatch {}" [(hyp-erc20.get-balance data.recipient)]))
(env-chain-data { "sender": data.recipient })
(mailbox.dispatch hyp-erc20 data.eth-domain data.recipient-key 15.0)
(print (format "Recipient balance after the dispatch {}" [(hyp-erc20.get-balance data.recipient)]))
(commit-tx)